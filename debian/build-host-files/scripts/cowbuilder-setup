#!/usr/bin/env bash
# This script creates a cowbuilder image for the given Debian distribution and for different architectures.
# It understand the following ENV variables:
#   - ARCHES: the architectures that we create an image for
#   - DIST: the distribution we create an image for (can be given as arg)
#   - MIRROR: the Debian mirror to use, if any
# The cowbuilder/pbuilder settings are defined in the /root/.pbuilderrc file
#
# === Caution ===
# This scripts makes the assumption that the host machine is a i386/amd64 machine.

# Defaults and initialisations
PS_REPO="http://ps-deb-repo.qalab.geant.net/debian/"
if [ -z "$ARCHES" ]; then
    ARCHES="amd64 i386 armhf armel arm64 ppc64el"
fi
if [ -n "$MIRROR" ]; then
    MIRROR="--mirror ${MIRROR}"
fi

if [ $# -eq 1 ]; then
    export DIST=$1
fi
if [ -z $DIST ]; then
    echo $0: usage: Creates a cowbuilder chroot for the given distro, \$DIST cannot be empty.
    exit 1
fi

# For error counting and logging
unset ERRS

# Create a new cowbuilder chroot and a place to put resulting packages
rm -rf /var/cache/pbuilder/result/${DIST}
mkdir -p /var/cache/pbuilder/result/${DIST}
touch /var/cache/pbuilder/result/${DIST}/Packages
for ARCH in $ARCHES
do
    echo -e "\n\033[1;37mCreating a cowbuilder image for \033[1;36m${DIST}-${ARCH}\033[1;37m.\033[0m"
    if [[ -d /var/cache/pbuilder/base-${DIST}-${ARCH}.cow ]]; then
        echo -e "Image already exists, we will update it."
        cowbuilder --update --basepath /var/cache/pbuilder/base-${DIST}-${ARCH}.cow
    else
        if [[ $ARCH == amd64 || $ARCH == i386 ]]; then
            cowbuilder --create --distribution ${DIST} --architecture ${ARCH} ${MIRROR} --basepath /var/cache/pbuilder/base-${DIST}-${ARCH}.cow
        elif [[ $DIST == wheezy && $ARCH =~ (arm64|ppc64el) ]]; then
            echo "There is no $ARCH port for Wheezy"
        elif [[ $DIST == jessie && $ARCH =~ (arm64|ppc64el) ]]; then
            echo "There is no more support for $ARCH port for Jessie LTS"
        else
            # For the foreign architectures, we use qemu inside the build chroot
            cowbuilder --create --distribution ${DIST} --architecture ${ARCH} ${MIRROR} --debootstrap qemu-debootstrap --basepath /var/cache/pbuilder/base-${DIST}-${ARCH}.cow
        fi
    fi
done

# List of perfSONAR release supported per Debian/Ubuntu release
case $DIST in
    jessie)
        PS_REL_LIST="perfsonar-4.1-staging perfsonar-4.1-snapshot"
        ;;
    stretch)
        PS_REL_LIST="perfsonar-4.2-staging perfsonar-4.2-snapshot perfsonar-4.3-staging perfsonar-4.3-snapshot"
        ;;
    *)
        echo "I'm not sure which perfSONAR release is supported for $DIST"
        echo "I'll stop here."
        exit 1
        ;;
esac

for PS_REL in $PS_REL_LIST
do
    # Update the cowbuilder chroot with speed increase, new sources and the perfSONAR repo key
    export TMP_SCRIPT=$(mktemp)
    echo "#!/bin/sh" > ${TMP_SCRIPT}
    echo 'echo "force-unsafe-io" > /etc/dpkg/dpkg.cfg.d/02apt-speedup' >> ${TMP_SCRIPT}
    if [[ "$DIST" == "stretch" ]]; then
        echo "apt-get install -y gnupg dirmngr" >> ${TMP_SCRIPT}
    fi
    # Add the perfSONAR source list at the top of the list and get the GPG key
    echo "mv /etc/apt/sources.list /tmp" >> ${TMP_SCRIPT}
    echo "echo \"deb ${PS_REPO} ${PS_REL} main\" > /etc/apt/sources.list" >> ${TMP_SCRIPT}
    echo "cat /tmp/sources.list >> /etc/apt/sources.list" >> ${TMP_SCRIPT}
    echo "apt-key adv --fetch-keys ${PS_REPO}perfsonar-snapshot.gpg.key" >> ${TMP_SCRIPT}
    echo "apt-get update" >> ${TMP_SCRIPT}
    for ARCH in $ARCHES
    do
        if [ -d /var/cache/pbuilder/base-${DIST}-${ARCH}.cow ]; then
            echo -e "\n\033[1;37mCreating a cowbuilder image for \033[1;36m${DIST}-${ARCH}\033[1;37m with \033[1;36m${PS_REL}\033[1;37m.\033[0m"
            rm -rf /var/cache/pbuilder/base-${DIST}-${ARCH}-${PS_REL}.cow
            cp -a /var/cache/pbuilder/base-${DIST}-${ARCH}.cow /var/cache/pbuilder/base-${DIST}-${ARCH}-${PS_REL}.cow
            if ! pbuilder execute --buildplace /var/cache/pbuilder/base-${DIST}-${ARCH}-${PS_REL}.cow --no-targz -- ${TMP_SCRIPT}; then
                ERRS[${#ERRS[*]}]="\n\033[1;32mError executing \033[1;31m${TMP_SCRIPT}\033[1;32mÂ in \033[0m/var/cache/pbuilder/base-${DIST}-${ARCH}-${PS_REL}.cow"
                echo -e $ERRS[${#ERRS[*]}-1]
            fi
        elif [[ $DIST == wheezy && $ARCH =~ (arm64|ppc64el) ]]; then
            echo "There is no $ARCH port for Wheezy"
        elif [[ $DIST == jessie && $ARCH =~ (arm64|ppc64el) ]]; then
            echo "There is no more support for $ARCH port for Jessie LTS"
        else
            ERRS[${#ERRS[*]}]="\n\033[1;32mCannot create cowbuilder image from \033[0m/var/cache/pbuilder/base-${DIST}-${ARCH}.cow\033[1;32m to \033[1;31m${PS_REL}\033[1;32m because it doesn't exist\033[0m"
            echo -e $ERRS[${#ERRS[*]}-1]
        fi
    done
    rm ${TMP_SCRIPT}
done

# Error reporting
if [ ${#ERRS[*]} -gt 0 ]; then
    echo -e "\n\033[1;32mThere were errors:\033[0m"
    echo -e ${ERRS[*]}
fi

